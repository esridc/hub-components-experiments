/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IHubChat, } from "./utils/hub-types";
import { IGeometry, IUser, } from "@esri/arcgis-rest-common-types";
import { IHubResource, } from "./utils/hub-api";
export namespace Components {
    interface ArcgisGeocard {
    }
    interface ArcgisNotebook {
        /**
          * Notebook can include other Javascript libraries Useful for some charting libraries (e.g. Vega Altair) But may be a security concern. Default: true
         */
        "allowScripts": boolean;
        /**
          * Optional ClientID to identify the app launching authentication Only required if accessing restricted notebooks
         */
        "clientid": string;
        /**
          * Notebook Item ID from ArcGIS Online or Enterprise Required
         */
        "item": string;
        /**
          * ArcGIS Online or Enterprise URL
         */
        "portal": string;
        /**
          * Optional serialized authentication information. Only required to access restricted notebooks.
         */
        "session": string;
        /**
          * Show the notebook preview (live/non-edit) or Edit Note: Edit currently blocked by ArcGIS security restrictions
         */
        "view": "preview" | "edit";
    }
    interface ArcgisSurvey {
        "item": string;
    }
    interface DiscussionEntry {
        "allowDelete": boolean;
        "allowEdit": boolean;
        "allowReply": boolean;
        "annotationId": string;
        "authorImage": string;
        "authorName": string;
        "description": string;
        "publishedDate": string;
    }
    interface DiscussionInput {
        /**
          * URL to this Hub's annotation service TODO: extract this implementation detail
         */
        "annotationsUrl": string;
        /**
          * Optional placeholder text for the input text area
         */
        "placeholder": string;
        /**
          * Serialized authentication information.
         */
        "session": string;
        /**
          * Button string message
         */
        "submit": string;
        /**
          * URI of the comment subject (e.g. item:4ef, item:4ef:feature:42:attribute:width)
         */
        "target": string;
    }
    interface DropArea {
        "allowedTypes": Array<string>;
    }
    interface HubButton {
        /**
          * action to trigger when the button is clicked
         */
        "action": Function;
        /**
          * Icon to display alongside the text
         */
        "icon": JSX.Element;
        /**
          * Button text to display
         */
        "text": string;
    }
    interface HubCard {
        "buttonAction": Function;
        "buttonText": string;
        "contenttype": string;
        "description": string;
        "image": string;
        "item": string;
        /**
          * Specify the layout of the card
         */
        "layout": "horizontal" | "vertical";
        "name": string;
        "url": string;
    }
    interface HubChat {
        /**
          * Set property to pass in messages. Can be used for default welcome message.
         */
        "incomingMessages": IHubChat;
        /**
          * Chat bot name
         */
        "name": string;
        /**
          * Current (or default) open state of the chatbox
         */
        "open": boolean;
        /**
          * Default input placeholder
         */
        "placeholder": string;
    }
    interface HubContentCard {
        "actionButton": any;
        "content": string;
        "contentItem": HubTypes.IHubContent;
        "layout": "horizontal" | "vertical";
    }
    interface HubContentTable {
        /**
          * Use the Hub API (true) or the Portal API (false)
         */
        "hubapi": boolean;
        /**
          * Total number of results to return
         */
        "limit": number;
        /**
          * Default query for the search
         */
        "query": string;
        /**
          * Hub site URL to scope for search
         */
        "site": string;
        /**
          * Hub site URL to scope for search
         */
        "sort": "name" | "modified" | "-name" | "-modified";
    }
    interface HubCountdown {
        /**
          * End Date as a 'YYYY-MM-DD'string. e.g. "2020-12-31" Leave blank to set to current time
         */
        "end": string;
        /**
          * Text to add after the date difference
         */
        "endText": string;
        /**
          * Start Date as a 'YYYY-MM-DD' string. e.g. "2020-12-31" Leave blank to set to current time
         */
        "start": string;
    }
    interface HubDiscussion {
        "allowReply": boolean;
        "annotationsUrl": string;
        "author": string;
        "org": string;
        "portalUrl": string;
        "query": string;
        /**
          * Serialized authentication information.
         */
        "session": string;
        "target": string;
        "update": boolean;
    }
    interface HubEmbed {
        "code": string;
        "description": string;
        "title": string;
    }
    interface HubEvent {
        "attending": boolean;
        /**
          * ClientID to identify the app launching OAuth
         */
        "clientid": string;
        "eventDate": string;
        "eventGroupId": string;
        "eventOrganizer": string;
        "eventServiceUrl": string;
        "eventUrl": string;
        /**
          * identifier for the ArcGIS Hub initiative
         */
        "eventtitle": string;
        /**
          * url of the ArcGIS Online organization
         */
        "orgurl": string;
        /**
          * Serialized authentication information.
         */
        "session": string;
    }
    interface HubEventsList {
        /**
          * Serialized authentication information.
         */
        "session": string;
    }
    interface HubFilterCategory {
        /**
          * List of categories to show. Can be set or inferred from facet
         */
        "categories": Array<string>;
        /**
          * Build filter from a facet name
         */
        "facet": string;
        /**
          * Type of facet
         */
        "facettype": "checkbox" | "tree";
        /**
          * For group categories, choose a groupid
         */
        "group": string;
        /**
          * Filter name to display at top
         */
        "name": string;
        /**
          * Input query for search box
         */
        "query": string;
    }
    interface HubFollowButton {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid": string;
        /**
          * Denotes whether the user is already following the configured initiative.
         */
        "following": boolean;
        /**
          * Text to show in the string when not yet followed
         */
        "followtext": string;
        /**
          * Follow icon
         */
        "icon": JSX.Element;
        /**
          * identifier for the ArcGIS Hub initiative
         */
        "initiativeid": string;
        /**
          * url of the ArcGIS Online organization
         */
        "orgurl": string;
        /**
          * Serialized authentication information.
         */
        "session": string;
        /**
          * Text to show in the string for user to unfollw
         */
        "unfollowtext": string;
        /**
          * User metadata
         */
        "user": IUser;
    }
    interface HubGallery {
        /**
          * Text to show in the button
         */
        "buttontext": string;
        "clientid": string;
        /**
          * Groups to limit search
         */
        "groups": string;
        /**
          * Use the Hub API (true) or the Portal API (false)
         */
        "hubapi": boolean;
        /**
          * Which Resources to search
         */
        "hubtype": "content" | "members" | "teams";
        /**
          * Hub site URL to scope for search
         */
        "layout": "horizontal" | "vertical";
        /**
          * Maximum number of results to return
         */
        "limit": number;
        "portal": string;
        /**
          * Default Query
         */
        "query": string;
        /**
          * Search Button text
         */
        "searchbutton": string;
        /**
          * Search placeholder text
         */
        "searchplaceholder": string;
        "session": string;
        /**
          * Choose to show or hide search
         */
        "showsearch": boolean;
        /**
          * Hub site URL to scope for search
         */
        "site": string;
        /**
          * Default sort order
         */
        "sort": "name" | "modified";
    }
    interface HubGeographyPicker {
        "inputLocation": string;
        /**
          * Default location to search
         */
        "location": string;
        /**
          * Serialized authentication information.
         */
        "session": string;
        /**
          * Existing Hub places array of geography from metadata editor Property name `value` because re-used across editors
         */
        "value": HubTypes.IHubGeography[];
    }
    interface HubIdentity {
        /**
          * ClientID to identify the app launching OAuth
         */
        "clientid": string;
        "displaysignin": boolean;
        "displaysignout": boolean;
        /**
          * url of the ArcGIS Online organization
         */
        "orgurl": string;
        /**
          * Serialized authentication information.
         */
        "session": string;
        "signin": string;
        "signout": string;
    }
    interface HubInput {
        /**
          * Default address to search
         */
        "address": string;
        /**
          * Geographic extent limit for geocoding
         */
        "extent": any;
    }
    interface HubLicensePicker {
        "license": string;
    }
    interface HubList {
        "collection": HubTypes.IHubResource[];
        "icon": string;
        "name": string;
        "summary": string;
        "url": string;
    }
    interface HubMap {
        /**
          * Center of the map, "[longitude, latitude]"
         */
        "center": string;
        /**
          * Option to show drawing tools
         */
        "drawing": boolean;
        /**
          * Optional Geometry to display
         */
        "geometry": Array<IGeometry>;
        "showFullscreen": boolean;
        /**
          * Webmap Item configuration to load
         */
        "webmap": string;
        /**
          * Map zoom level: 1=world ... 20=street
         */
        "zoom": number;
    }
    interface HubMetadataEditor {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid": string;
        "item": string;
        "itemTitle": string;
        "portal": string;
        "session": string;
        "summary": string;
        "tags": Array<string>;
    }
    interface HubPlacesMap {
        /**
          * Choose to save or load places from user profile directly from session
         */
        "bindState": boolean;
        /**
          * Option to view places map, or edit places map
         */
        "mode": "view" | "edit";
        /**
          * Serialized authentication information.
         */
        "session": string;
        /**
          * Hub places array of geography. Property name `value` because re-used across editors
         */
        "value": HubTypes.IHubGeography[];
    }
    interface HubProfileCard {
        /**
          * Which Profile: member, team
         */
        "type": string;
        /**
          * ID For the profile. Username, Team ID, Org ID
         */
        "username": string;
    }
    interface HubProfileEditor {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid": string;
        "portal": string;
        "session": string;
        "username": string;
    }
    interface HubRadar {
        "address": string;
        "mapCenter": string;
        "mapItem": any;
        "mapItemData": any;
        "mapZoom": number;
        "messages": any;
        "showmap": boolean;
        "webmap": string;
    }
    interface HubSonarChat {
        "sendMessages": IHubChat;
        "service": string;
    }
    interface HubStatistic {
        "label": string;
        "size": "s" | "m" | "l";
        "units": string;
        "value": string | number;
    }
    interface HubSuggestInput {
        /**
          * Geographic extent limit for geocoding
         */
        "extent": any;
        /**
          * Value for input placeholder
         */
        "placeholder": string;
        /**
          * Default search
         */
        "query": string;
        /**
          * Value for submit button
         */
        "submit": string;
        /**
          * Values that the auto-complete textbox should search for
         */
        "suggestions": Array<string>;
    }
    interface HubTelemetry {
        "google": string;
    }
    interface HubTopicPicker {
        /**
          * Option to allow for selected & de-selecting topics
         */
        "allowSelection": boolean;
        "options": string;
        /**
          * Array of topics to be displayed
         */
        "topicsAvailable": Array<string>;
        /**
          * Array of topics that are current selected
         */
        "topicsSelected": Array<string>;
        "values": string;
    }
    interface HubUpload {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid": string;
        "portal": string;
        "session": string;
    }
    interface HubUploadFile {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid": string;
        "file": File;
        "itemType": string;
        "portal": string;
        "session": string;
    }
    interface HubWorkspace {
        /**
          * Serialized authentication information.
         */
        "session": string;
    }
    interface MetadataElementView {
        "description": string;
        "elementId": string;
        "elementTitle": string;
        "required": boolean;
        /**
          * JSON schema definition for a specific metadata property see https://json-schema.org/understanding-json-schema/basics.html
         */
        "schema": object;
        /**
          * Subtype is used to override the metadata editor for this element e.g. `geography` or `topics` show specific editors
         */
        "subtype": string;
        /**
          * Which translator to use from the schema definition
         */
        "translator": string;
        /**
          * Currently based on calcite-components input
         */
        "type": "number" | "text" | "color" | "date" | "datetime-local" | "email" | "file" | "image" | "month" | "password" | "search" | "tel" | "textarea" | "time" | "url" | "week";
        "value": string;
    }
    interface MetadataForm {
        "locale": string;
        "resource": any;
        "sections": Array<string>;
    }
    interface MetadataSectionHelp {
        "description": string;
        "elementTitle": string;
    }
    interface MetadataSectionView {
        "description": string;
        "elementTitle": string;
        /**
          * JSON Schema Properties section
         */
        "inputs": Array<any>;
        "locale": string;
        /**
          * Hub Resource object.
         */
        "resource": IHubResource;
        "spec": string;
        /**
          * Which translator to use from the schema definition
         */
        "translator": string;
    }
}
declare global {
    interface HTMLArcgisGeocardElement extends Components.ArcgisGeocard, HTMLStencilElement {
    }
    var HTMLArcgisGeocardElement: {
        prototype: HTMLArcgisGeocardElement;
        new (): HTMLArcgisGeocardElement;
    };
    interface HTMLArcgisNotebookElement extends Components.ArcgisNotebook, HTMLStencilElement {
    }
    var HTMLArcgisNotebookElement: {
        prototype: HTMLArcgisNotebookElement;
        new (): HTMLArcgisNotebookElement;
    };
    interface HTMLArcgisSurveyElement extends Components.ArcgisSurvey, HTMLStencilElement {
    }
    var HTMLArcgisSurveyElement: {
        prototype: HTMLArcgisSurveyElement;
        new (): HTMLArcgisSurveyElement;
    };
    interface HTMLDiscussionEntryElement extends Components.DiscussionEntry, HTMLStencilElement {
    }
    var HTMLDiscussionEntryElement: {
        prototype: HTMLDiscussionEntryElement;
        new (): HTMLDiscussionEntryElement;
    };
    interface HTMLDiscussionInputElement extends Components.DiscussionInput, HTMLStencilElement {
    }
    var HTMLDiscussionInputElement: {
        prototype: HTMLDiscussionInputElement;
        new (): HTMLDiscussionInputElement;
    };
    interface HTMLDropAreaElement extends Components.DropArea, HTMLStencilElement {
    }
    var HTMLDropAreaElement: {
        prototype: HTMLDropAreaElement;
        new (): HTMLDropAreaElement;
    };
    interface HTMLHubButtonElement extends Components.HubButton, HTMLStencilElement {
    }
    var HTMLHubButtonElement: {
        prototype: HTMLHubButtonElement;
        new (): HTMLHubButtonElement;
    };
    interface HTMLHubCardElement extends Components.HubCard, HTMLStencilElement {
    }
    var HTMLHubCardElement: {
        prototype: HTMLHubCardElement;
        new (): HTMLHubCardElement;
    };
    interface HTMLHubChatElement extends Components.HubChat, HTMLStencilElement {
    }
    var HTMLHubChatElement: {
        prototype: HTMLHubChatElement;
        new (): HTMLHubChatElement;
    };
    interface HTMLHubContentCardElement extends Components.HubContentCard, HTMLStencilElement {
    }
    var HTMLHubContentCardElement: {
        prototype: HTMLHubContentCardElement;
        new (): HTMLHubContentCardElement;
    };
    interface HTMLHubContentTableElement extends Components.HubContentTable, HTMLStencilElement {
    }
    var HTMLHubContentTableElement: {
        prototype: HTMLHubContentTableElement;
        new (): HTMLHubContentTableElement;
    };
    interface HTMLHubCountdownElement extends Components.HubCountdown, HTMLStencilElement {
    }
    var HTMLHubCountdownElement: {
        prototype: HTMLHubCountdownElement;
        new (): HTMLHubCountdownElement;
    };
    interface HTMLHubDiscussionElement extends Components.HubDiscussion, HTMLStencilElement {
    }
    var HTMLHubDiscussionElement: {
        prototype: HTMLHubDiscussionElement;
        new (): HTMLHubDiscussionElement;
    };
    interface HTMLHubEmbedElement extends Components.HubEmbed, HTMLStencilElement {
    }
    var HTMLHubEmbedElement: {
        prototype: HTMLHubEmbedElement;
        new (): HTMLHubEmbedElement;
    };
    interface HTMLHubEventElement extends Components.HubEvent, HTMLStencilElement {
    }
    var HTMLHubEventElement: {
        prototype: HTMLHubEventElement;
        new (): HTMLHubEventElement;
    };
    interface HTMLHubEventsListElement extends Components.HubEventsList, HTMLStencilElement {
    }
    var HTMLHubEventsListElement: {
        prototype: HTMLHubEventsListElement;
        new (): HTMLHubEventsListElement;
    };
    interface HTMLHubFilterCategoryElement extends Components.HubFilterCategory, HTMLStencilElement {
    }
    var HTMLHubFilterCategoryElement: {
        prototype: HTMLHubFilterCategoryElement;
        new (): HTMLHubFilterCategoryElement;
    };
    interface HTMLHubFollowButtonElement extends Components.HubFollowButton, HTMLStencilElement {
    }
    var HTMLHubFollowButtonElement: {
        prototype: HTMLHubFollowButtonElement;
        new (): HTMLHubFollowButtonElement;
    };
    interface HTMLHubGalleryElement extends Components.HubGallery, HTMLStencilElement {
    }
    var HTMLHubGalleryElement: {
        prototype: HTMLHubGalleryElement;
        new (): HTMLHubGalleryElement;
    };
    interface HTMLHubGeographyPickerElement extends Components.HubGeographyPicker, HTMLStencilElement {
    }
    var HTMLHubGeographyPickerElement: {
        prototype: HTMLHubGeographyPickerElement;
        new (): HTMLHubGeographyPickerElement;
    };
    interface HTMLHubIdentityElement extends Components.HubIdentity, HTMLStencilElement {
    }
    var HTMLHubIdentityElement: {
        prototype: HTMLHubIdentityElement;
        new (): HTMLHubIdentityElement;
    };
    interface HTMLHubInputElement extends Components.HubInput, HTMLStencilElement {
    }
    var HTMLHubInputElement: {
        prototype: HTMLHubInputElement;
        new (): HTMLHubInputElement;
    };
    interface HTMLHubLicensePickerElement extends Components.HubLicensePicker, HTMLStencilElement {
    }
    var HTMLHubLicensePickerElement: {
        prototype: HTMLHubLicensePickerElement;
        new (): HTMLHubLicensePickerElement;
    };
    interface HTMLHubListElement extends Components.HubList, HTMLStencilElement {
    }
    var HTMLHubListElement: {
        prototype: HTMLHubListElement;
        new (): HTMLHubListElement;
    };
    interface HTMLHubMapElement extends Components.HubMap, HTMLStencilElement {
    }
    var HTMLHubMapElement: {
        prototype: HTMLHubMapElement;
        new (): HTMLHubMapElement;
    };
    interface HTMLHubMetadataEditorElement extends Components.HubMetadataEditor, HTMLStencilElement {
    }
    var HTMLHubMetadataEditorElement: {
        prototype: HTMLHubMetadataEditorElement;
        new (): HTMLHubMetadataEditorElement;
    };
    interface HTMLHubPlacesMapElement extends Components.HubPlacesMap, HTMLStencilElement {
    }
    var HTMLHubPlacesMapElement: {
        prototype: HTMLHubPlacesMapElement;
        new (): HTMLHubPlacesMapElement;
    };
    interface HTMLHubProfileCardElement extends Components.HubProfileCard, HTMLStencilElement {
    }
    var HTMLHubProfileCardElement: {
        prototype: HTMLHubProfileCardElement;
        new (): HTMLHubProfileCardElement;
    };
    interface HTMLHubProfileEditorElement extends Components.HubProfileEditor, HTMLStencilElement {
    }
    var HTMLHubProfileEditorElement: {
        prototype: HTMLHubProfileEditorElement;
        new (): HTMLHubProfileEditorElement;
    };
    interface HTMLHubRadarElement extends Components.HubRadar, HTMLStencilElement {
    }
    var HTMLHubRadarElement: {
        prototype: HTMLHubRadarElement;
        new (): HTMLHubRadarElement;
    };
    interface HTMLHubSonarChatElement extends Components.HubSonarChat, HTMLStencilElement {
    }
    var HTMLHubSonarChatElement: {
        prototype: HTMLHubSonarChatElement;
        new (): HTMLHubSonarChatElement;
    };
    interface HTMLHubStatisticElement extends Components.HubStatistic, HTMLStencilElement {
    }
    var HTMLHubStatisticElement: {
        prototype: HTMLHubStatisticElement;
        new (): HTMLHubStatisticElement;
    };
    interface HTMLHubSuggestInputElement extends Components.HubSuggestInput, HTMLStencilElement {
    }
    var HTMLHubSuggestInputElement: {
        prototype: HTMLHubSuggestInputElement;
        new (): HTMLHubSuggestInputElement;
    };
    interface HTMLHubTelemetryElement extends Components.HubTelemetry, HTMLStencilElement {
    }
    var HTMLHubTelemetryElement: {
        prototype: HTMLHubTelemetryElement;
        new (): HTMLHubTelemetryElement;
    };
    interface HTMLHubTopicPickerElement extends Components.HubTopicPicker, HTMLStencilElement {
    }
    var HTMLHubTopicPickerElement: {
        prototype: HTMLHubTopicPickerElement;
        new (): HTMLHubTopicPickerElement;
    };
    interface HTMLHubUploadElement extends Components.HubUpload, HTMLStencilElement {
    }
    var HTMLHubUploadElement: {
        prototype: HTMLHubUploadElement;
        new (): HTMLHubUploadElement;
    };
    interface HTMLHubUploadFileElement extends Components.HubUploadFile, HTMLStencilElement {
    }
    var HTMLHubUploadFileElement: {
        prototype: HTMLHubUploadFileElement;
        new (): HTMLHubUploadFileElement;
    };
    interface HTMLHubWorkspaceElement extends Components.HubWorkspace, HTMLStencilElement {
    }
    var HTMLHubWorkspaceElement: {
        prototype: HTMLHubWorkspaceElement;
        new (): HTMLHubWorkspaceElement;
    };
    interface HTMLMetadataElementViewElement extends Components.MetadataElementView, HTMLStencilElement {
    }
    var HTMLMetadataElementViewElement: {
        prototype: HTMLMetadataElementViewElement;
        new (): HTMLMetadataElementViewElement;
    };
    interface HTMLMetadataFormElement extends Components.MetadataForm, HTMLStencilElement {
    }
    var HTMLMetadataFormElement: {
        prototype: HTMLMetadataFormElement;
        new (): HTMLMetadataFormElement;
    };
    interface HTMLMetadataSectionHelpElement extends Components.MetadataSectionHelp, HTMLStencilElement {
    }
    var HTMLMetadataSectionHelpElement: {
        prototype: HTMLMetadataSectionHelpElement;
        new (): HTMLMetadataSectionHelpElement;
    };
    interface HTMLMetadataSectionViewElement extends Components.MetadataSectionView, HTMLStencilElement {
    }
    var HTMLMetadataSectionViewElement: {
        prototype: HTMLMetadataSectionViewElement;
        new (): HTMLMetadataSectionViewElement;
    };
    interface HTMLElementTagNameMap {
        "arcgis-geocard": HTMLArcgisGeocardElement;
        "arcgis-notebook": HTMLArcgisNotebookElement;
        "arcgis-survey": HTMLArcgisSurveyElement;
        "discussion-entry": HTMLDiscussionEntryElement;
        "discussion-input": HTMLDiscussionInputElement;
        "drop-area": HTMLDropAreaElement;
        "hub-button": HTMLHubButtonElement;
        "hub-card": HTMLHubCardElement;
        "hub-chat": HTMLHubChatElement;
        "hub-content-card": HTMLHubContentCardElement;
        "hub-content-table": HTMLHubContentTableElement;
        "hub-countdown": HTMLHubCountdownElement;
        "hub-discussion": HTMLHubDiscussionElement;
        "hub-embed": HTMLHubEmbedElement;
        "hub-event": HTMLHubEventElement;
        "hub-events-list": HTMLHubEventsListElement;
        "hub-filter-category": HTMLHubFilterCategoryElement;
        "hub-follow-button": HTMLHubFollowButtonElement;
        "hub-gallery": HTMLHubGalleryElement;
        "hub-geography-picker": HTMLHubGeographyPickerElement;
        "hub-identity": HTMLHubIdentityElement;
        "hub-input": HTMLHubInputElement;
        "hub-license-picker": HTMLHubLicensePickerElement;
        "hub-list": HTMLHubListElement;
        "hub-map": HTMLHubMapElement;
        "hub-metadata-editor": HTMLHubMetadataEditorElement;
        "hub-places-map": HTMLHubPlacesMapElement;
        "hub-profile-card": HTMLHubProfileCardElement;
        "hub-profile-editor": HTMLHubProfileEditorElement;
        "hub-radar": HTMLHubRadarElement;
        "hub-sonar-chat": HTMLHubSonarChatElement;
        "hub-statistic": HTMLHubStatisticElement;
        "hub-suggest-input": HTMLHubSuggestInputElement;
        "hub-telemetry": HTMLHubTelemetryElement;
        "hub-topic-picker": HTMLHubTopicPickerElement;
        "hub-upload": HTMLHubUploadElement;
        "hub-upload-file": HTMLHubUploadFileElement;
        "hub-workspace": HTMLHubWorkspaceElement;
        "metadata-element-view": HTMLMetadataElementViewElement;
        "metadata-form": HTMLMetadataFormElement;
        "metadata-section-help": HTMLMetadataSectionHelpElement;
        "metadata-section-view": HTMLMetadataSectionViewElement;
    }
}
declare namespace LocalJSX {
    interface ArcgisGeocard {
    }
    interface ArcgisNotebook {
        /**
          * Notebook can include other Javascript libraries Useful for some charting libraries (e.g. Vega Altair) But may be a security concern. Default: true
         */
        "allowScripts"?: boolean;
        /**
          * Optional ClientID to identify the app launching authentication Only required if accessing restricted notebooks
         */
        "clientid"?: string;
        /**
          * Notebook Item ID from ArcGIS Online or Enterprise Required
         */
        "item"?: string;
        /**
          * ArcGIS Online or Enterprise URL
         */
        "portal"?: string;
        /**
          * Optional serialized authentication information. Only required to access restricted notebooks.
         */
        "session"?: string;
        /**
          * Show the notebook preview (live/non-edit) or Edit Note: Edit currently blocked by ArcGIS security restrictions
         */
        "view"?: "preview" | "edit";
    }
    interface ArcgisSurvey {
        "item"?: string;
    }
    interface DiscussionEntry {
        "allowDelete"?: boolean;
        "allowEdit"?: boolean;
        "allowReply"?: boolean;
        "annotationId"?: string;
        "authorImage"?: string;
        "authorName"?: string;
        "description"?: string;
        "onEventDeleteAnnotation"?: (event: CustomEvent<any>) => void;
        "publishedDate"?: string;
    }
    interface DiscussionInput {
        /**
          * URL to this Hub's annotation service TODO: extract this implementation detail
         */
        "annotationsUrl"?: string;
        /**
          * Event emitted when a comment is successfully commited
         */
        "onEventAddAnnotation"?: (event: CustomEvent<any>) => void;
        /**
          * Optional placeholder text for the input text area
         */
        "placeholder"?: string;
        /**
          * Serialized authentication information.
         */
        "session"?: string;
        /**
          * Button string message
         */
        "submit"?: string;
        /**
          * URI of the comment subject (e.g. item:4ef, item:4ef:feature:42:attribute:width)
         */
        "target"?: string;
    }
    interface DropArea {
        "allowedTypes"?: Array<string>;
        /**
          * Emits the chat input
         */
        "onOnFilesSubmitted"?: (event: CustomEvent<any>) => void;
    }
    interface HubButton {
        /**
          * action to trigger when the button is clicked
         */
        "action"?: Function;
        /**
          * Icon to display alongside the text
         */
        "icon"?: JSX.Element;
        /**
          * Button text to display
         */
        "text"?: string;
    }
    interface HubCard {
        "buttonAction"?: Function;
        "buttonText"?: string;
        "contenttype"?: string;
        "description"?: string;
        "image"?: string;
        "item"?: string;
        /**
          * Specify the layout of the card
         */
        "layout"?: "horizontal" | "vertical";
        "name"?: string;
        "url"?: string;
    }
    interface HubChat {
        /**
          * Set property to pass in messages. Can be used for default welcome message.
         */
        "incomingMessages"?: IHubChat;
        /**
          * Chat bot name
         */
        "name"?: string;
        /**
          * Emits the chat input
         */
        "onOnChatSubmitted"?: (event: CustomEvent<any>) => void;
        /**
          * Current (or default) open state of the chatbox
         */
        "open"?: boolean;
        /**
          * Default input placeholder
         */
        "placeholder"?: string;
    }
    interface HubContentCard {
        "actionButton"?: any;
        "content"?: string;
        "contentItem"?: HubTypes.IHubContent;
        "layout"?: "horizontal" | "vertical";
    }
    interface HubContentTable {
        /**
          * Use the Hub API (true) or the Portal API (false)
         */
        "hubapi"?: boolean;
        /**
          * Total number of results to return
         */
        "limit"?: number;
        /**
          * Default query for the search
         */
        "query"?: string;
        /**
          * Hub site URL to scope for search
         */
        "site"?: string;
        /**
          * Hub site URL to scope for search
         */
        "sort"?: "name" | "modified" | "-name" | "-modified";
    }
    interface HubCountdown {
        /**
          * End Date as a 'YYYY-MM-DD'string. e.g. "2020-12-31" Leave blank to set to current time
         */
        "end"?: string;
        /**
          * Text to add after the date difference
         */
        "endText"?: string;
        /**
          * Start Date as a 'YYYY-MM-DD' string. e.g. "2020-12-31" Leave blank to set to current time
         */
        "start"?: string;
    }
    interface HubDiscussion {
        "allowReply"?: boolean;
        "annotationsUrl"?: string;
        "author"?: string;
        "onNewResponse"?: (event: CustomEvent<any>) => void;
        "org"?: string;
        "portalUrl"?: string;
        "query"?: string;
        /**
          * Serialized authentication information.
         */
        "session"?: string;
        "target"?: string;
        "update"?: boolean;
    }
    interface HubEmbed {
        "code"?: string;
        "description"?: string;
        "title"?: string;
    }
    interface HubEvent {
        "attending"?: boolean;
        /**
          * ClientID to identify the app launching OAuth
         */
        "clientid"?: string;
        "eventDate"?: string;
        "eventGroupId"?: string;
        "eventOrganizer"?: string;
        "eventServiceUrl"?: string;
        "eventUrl"?: string;
        /**
          * identifier for the ArcGIS Hub initiative
         */
        "eventtitle"?: string;
        /**
          * url of the ArcGIS Online organization
         */
        "orgurl"?: string;
        /**
          * Serialized authentication information.
         */
        "session"?: string;
    }
    interface HubEventsList {
        /**
          * Serialized authentication information.
         */
        "session"?: string;
    }
    interface HubFilterCategory {
        /**
          * List of categories to show. Can be set or inferred from facet
         */
        "categories"?: Array<string>;
        /**
          * Build filter from a facet name
         */
        "facet"?: string;
        /**
          * Type of facet
         */
        "facettype"?: "checkbox" | "tree";
        /**
          * For group categories, choose a groupid
         */
        "group"?: string;
        /**
          * Filter name to display at top
         */
        "name"?: string;
        /**
          * Emitted when a filter is changed
         */
        "onFilterChanged"?: (event: CustomEvent<any>) => void;
        /**
          * Input query for search box
         */
        "query"?: string;
    }
    interface HubFollowButton {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid"?: string;
        /**
          * Denotes whether the user is already following the configured initiative.
         */
        "following"?: boolean;
        /**
          * Text to show in the string when not yet followed
         */
        "followtext"?: string;
        /**
          * Follow icon
         */
        "icon"?: JSX.Element;
        /**
          * identifier for the ArcGIS Hub initiative
         */
        "initiativeid"?: string;
        /**
          * url of the ArcGIS Online organization
         */
        "orgurl"?: string;
        /**
          * Serialized authentication information.
         */
        "session"?: string;
        /**
          * Text to show in the string for user to unfollw
         */
        "unfollowtext"?: string;
        /**
          * User metadata
         */
        "user"?: IUser;
    }
    interface HubGallery {
        /**
          * Text to show in the button
         */
        "buttontext"?: string;
        "clientid"?: string;
        /**
          * Groups to limit search
         */
        "groups"?: string;
        /**
          * Use the Hub API (true) or the Portal API (false)
         */
        "hubapi"?: boolean;
        /**
          * Which Resources to search
         */
        "hubtype"?: "content" | "members" | "teams";
        /**
          * Hub site URL to scope for search
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * Maximum number of results to return
         */
        "limit"?: number;
        "portal"?: string;
        /**
          * Default Query
         */
        "query"?: string;
        /**
          * Search Button text
         */
        "searchbutton"?: string;
        /**
          * Search placeholder text
         */
        "searchplaceholder"?: string;
        "session"?: string;
        /**
          * Choose to show or hide search
         */
        "showsearch"?: boolean;
        /**
          * Hub site URL to scope for search
         */
        "site"?: string;
        /**
          * Default sort order
         */
        "sort"?: "name" | "modified";
    }
    interface HubGeographyPicker {
        "inputLocation"?: string;
        /**
          * Default location to search
         */
        "location"?: string;
        /**
          * Serialized authentication information.
         */
        "session"?: string;
        /**
          * Existing Hub places array of geography from metadata editor Property name `value` because re-used across editors
         */
        "value"?: HubTypes.IHubGeography[];
    }
    interface HubIdentity {
        /**
          * ClientID to identify the app launching OAuth
         */
        "clientid"?: string;
        "displaysignin"?: boolean;
        "displaysignout"?: boolean;
        "onOnSignin"?: (event: CustomEvent<any>) => void;
        "onOnSignout"?: (event: CustomEvent<any>) => void;
        /**
          * url of the ArcGIS Online organization
         */
        "orgurl"?: string;
        /**
          * Serialized authentication information.
         */
        "session"?: string;
        "signin"?: string;
        "signout"?: string;
    }
    interface HubInput {
        /**
          * Default address to search
         */
        "address"?: string;
        /**
          * Geographic extent limit for geocoding
         */
        "extent"?: any;
        /**
          * Emits the {address, coordinates} of the geocoded result
         */
        "onEventAddressUpdated"?: (event: CustomEvent<any>) => void;
    }
    interface HubLicensePicker {
        "license"?: string;
    }
    interface HubList {
        "collection"?: HubTypes.IHubResource[];
        "icon"?: string;
        "name"?: string;
        "summary"?: string;
        "url"?: string;
    }
    interface HubMap {
        /**
          * Center of the map, "[longitude, latitude]"
         */
        "center"?: string;
        /**
          * Option to show drawing tools
         */
        "drawing"?: boolean;
        /**
          * Optional Geometry to display
         */
        "geometry"?: Array<IGeometry>;
        /**
          * Sends event when drawing is complete
         */
        "onDrawingComplete"?: (event: CustomEvent<any>) => void;
        "showFullscreen"?: boolean;
        /**
          * Webmap Item configuration to load
         */
        "webmap"?: string;
        /**
          * Map zoom level: 1=world ... 20=street
         */
        "zoom"?: number;
    }
    interface HubMetadataEditor {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid"?: string;
        "item"?: string;
        "itemTitle"?: string;
        "portal"?: string;
        "session"?: string;
        "summary"?: string;
        "tags"?: Array<string>;
    }
    interface HubPlacesMap {
        /**
          * Choose to save or load places from user profile directly from session
         */
        "bindState"?: boolean;
        /**
          * Option to view places map, or edit places map
         */
        "mode"?: "view" | "edit";
        /**
          * Serialized authentication information.
         */
        "session"?: string;
        /**
          * Hub places array of geography. Property name `value` because re-used across editors
         */
        "value"?: HubTypes.IHubGeography[];
    }
    interface HubProfileCard {
        /**
          * Which Profile: member, team
         */
        "type"?: string;
        /**
          * ID For the profile. Username, Team ID, Org ID
         */
        "username"?: string;
    }
    interface HubProfileEditor {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid"?: string;
        "portal"?: string;
        "session"?: string;
        "username"?: string;
    }
    interface HubRadar {
        "address"?: string;
        "mapCenter"?: string;
        "mapItem"?: any;
        "mapItemData"?: any;
        "mapZoom"?: number;
        "messages"?: any;
        "showmap"?: boolean;
        "webmap"?: string;
    }
    interface HubSonarChat {
        "sendMessages"?: IHubChat;
        "service"?: string;
    }
    interface HubStatistic {
        "label"?: string;
        "size"?: "s" | "m" | "l";
        "units"?: string;
        "value"?: string | number;
    }
    interface HubSuggestInput {
        /**
          * Geographic extent limit for geocoding
         */
        "extent"?: any;
        "onQueryInput"?: (event: CustomEvent<any>) => void;
        /**
          * Emits the query of the input result
         */
        "onQuerySelect"?: (event: CustomEvent<any>) => void;
        /**
          * Value for input placeholder
         */
        "placeholder"?: string;
        /**
          * Default search
         */
        "query"?: string;
        /**
          * Value for submit button
         */
        "submit"?: string;
        /**
          * Values that the auto-complete textbox should search for
         */
        "suggestions"?: Array<string>;
    }
    interface HubTelemetry {
        "google"?: string;
    }
    interface HubTopicPicker {
        /**
          * Option to allow for selected & de-selecting topics
         */
        "allowSelection"?: boolean;
        "onEditorUpdated"?: (event: CustomEvent<any>) => void;
        /**
          * Event sent when a topic is selected or deselected
         */
        "onTopicSelected"?: (event: CustomEvent<ITopic>) => void;
        /**
          * Event sent after any or all topics updated
         */
        "onTopicsChanged"?: (event: CustomEvent<Array<ITopic>>) => void;
        "options"?: string;
        /**
          * Array of topics to be displayed
         */
        "topicsAvailable"?: Array<string>;
        /**
          * Array of topics that are current selected
         */
        "topicsSelected"?: Array<string>;
        "values"?: string;
    }
    interface HubUpload {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid"?: string;
        "onOnUploadCompleted"?: (event: CustomEvent<Blob>) => void;
        "portal"?: string;
        "session"?: string;
    }
    interface HubUploadFile {
        /**
          * ClientID to identify the app launching auth
         */
        "clientid"?: string;
        "file"?: File;
        "itemType"?: string;
        "portal"?: string;
        "session"?: string;
    }
    interface HubWorkspace {
        /**
          * Serialized authentication information.
         */
        "session"?: string;
    }
    interface MetadataElementView {
        "description"?: string;
        "elementId"?: string;
        "elementTitle"?: string;
        "onElementUpdated"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        /**
          * JSON schema definition for a specific metadata property see https://json-schema.org/understanding-json-schema/basics.html
         */
        "schema"?: object;
        /**
          * Subtype is used to override the metadata editor for this element e.g. `geography` or `topics` show specific editors
         */
        "subtype"?: string;
        /**
          * Which translator to use from the schema definition
         */
        "translator"?: string;
        /**
          * Currently based on calcite-components input
         */
        "type"?: "number" | "text" | "color" | "date" | "datetime-local" | "email" | "file" | "image" | "month" | "password" | "search" | "tel" | "textarea" | "time" | "url" | "week";
        "value"?: string;
    }
    interface MetadataForm {
        "locale"?: string;
        "resource"?: any;
        "sections"?: Array<string>;
    }
    interface MetadataSectionHelp {
        "description"?: string;
        "elementTitle"?: string;
    }
    interface MetadataSectionView {
        "description"?: string;
        "elementTitle"?: string;
        /**
          * JSON Schema Properties section
         */
        "inputs"?: Array<any>;
        "locale"?: string;
        "onResourceUpdated"?: (event: CustomEvent<any>) => void;
        /**
          * Hub Resource object.
         */
        "resource"?: IHubResource;
        "spec"?: string;
        /**
          * Which translator to use from the schema definition
         */
        "translator"?: string;
    }
    interface IntrinsicElements {
        "arcgis-geocard": ArcgisGeocard;
        "arcgis-notebook": ArcgisNotebook;
        "arcgis-survey": ArcgisSurvey;
        "discussion-entry": DiscussionEntry;
        "discussion-input": DiscussionInput;
        "drop-area": DropArea;
        "hub-button": HubButton;
        "hub-card": HubCard;
        "hub-chat": HubChat;
        "hub-content-card": HubContentCard;
        "hub-content-table": HubContentTable;
        "hub-countdown": HubCountdown;
        "hub-discussion": HubDiscussion;
        "hub-embed": HubEmbed;
        "hub-event": HubEvent;
        "hub-events-list": HubEventsList;
        "hub-filter-category": HubFilterCategory;
        "hub-follow-button": HubFollowButton;
        "hub-gallery": HubGallery;
        "hub-geography-picker": HubGeographyPicker;
        "hub-identity": HubIdentity;
        "hub-input": HubInput;
        "hub-license-picker": HubLicensePicker;
        "hub-list": HubList;
        "hub-map": HubMap;
        "hub-metadata-editor": HubMetadataEditor;
        "hub-places-map": HubPlacesMap;
        "hub-profile-card": HubProfileCard;
        "hub-profile-editor": HubProfileEditor;
        "hub-radar": HubRadar;
        "hub-sonar-chat": HubSonarChat;
        "hub-statistic": HubStatistic;
        "hub-suggest-input": HubSuggestInput;
        "hub-telemetry": HubTelemetry;
        "hub-topic-picker": HubTopicPicker;
        "hub-upload": HubUpload;
        "hub-upload-file": HubUploadFile;
        "hub-workspace": HubWorkspace;
        "metadata-element-view": MetadataElementView;
        "metadata-form": MetadataForm;
        "metadata-section-help": MetadataSectionHelp;
        "metadata-section-view": MetadataSectionView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arcgis-geocard": LocalJSX.ArcgisGeocard & JSXBase.HTMLAttributes<HTMLArcgisGeocardElement>;
            "arcgis-notebook": LocalJSX.ArcgisNotebook & JSXBase.HTMLAttributes<HTMLArcgisNotebookElement>;
            "arcgis-survey": LocalJSX.ArcgisSurvey & JSXBase.HTMLAttributes<HTMLArcgisSurveyElement>;
            "discussion-entry": LocalJSX.DiscussionEntry & JSXBase.HTMLAttributes<HTMLDiscussionEntryElement>;
            "discussion-input": LocalJSX.DiscussionInput & JSXBase.HTMLAttributes<HTMLDiscussionInputElement>;
            "drop-area": LocalJSX.DropArea & JSXBase.HTMLAttributes<HTMLDropAreaElement>;
            "hub-button": LocalJSX.HubButton & JSXBase.HTMLAttributes<HTMLHubButtonElement>;
            "hub-card": LocalJSX.HubCard & JSXBase.HTMLAttributes<HTMLHubCardElement>;
            "hub-chat": LocalJSX.HubChat & JSXBase.HTMLAttributes<HTMLHubChatElement>;
            "hub-content-card": LocalJSX.HubContentCard & JSXBase.HTMLAttributes<HTMLHubContentCardElement>;
            "hub-content-table": LocalJSX.HubContentTable & JSXBase.HTMLAttributes<HTMLHubContentTableElement>;
            "hub-countdown": LocalJSX.HubCountdown & JSXBase.HTMLAttributes<HTMLHubCountdownElement>;
            "hub-discussion": LocalJSX.HubDiscussion & JSXBase.HTMLAttributes<HTMLHubDiscussionElement>;
            "hub-embed": LocalJSX.HubEmbed & JSXBase.HTMLAttributes<HTMLHubEmbedElement>;
            "hub-event": LocalJSX.HubEvent & JSXBase.HTMLAttributes<HTMLHubEventElement>;
            "hub-events-list": LocalJSX.HubEventsList & JSXBase.HTMLAttributes<HTMLHubEventsListElement>;
            "hub-filter-category": LocalJSX.HubFilterCategory & JSXBase.HTMLAttributes<HTMLHubFilterCategoryElement>;
            "hub-follow-button": LocalJSX.HubFollowButton & JSXBase.HTMLAttributes<HTMLHubFollowButtonElement>;
            "hub-gallery": LocalJSX.HubGallery & JSXBase.HTMLAttributes<HTMLHubGalleryElement>;
            "hub-geography-picker": LocalJSX.HubGeographyPicker & JSXBase.HTMLAttributes<HTMLHubGeographyPickerElement>;
            "hub-identity": LocalJSX.HubIdentity & JSXBase.HTMLAttributes<HTMLHubIdentityElement>;
            "hub-input": LocalJSX.HubInput & JSXBase.HTMLAttributes<HTMLHubInputElement>;
            "hub-license-picker": LocalJSX.HubLicensePicker & JSXBase.HTMLAttributes<HTMLHubLicensePickerElement>;
            "hub-list": LocalJSX.HubList & JSXBase.HTMLAttributes<HTMLHubListElement>;
            "hub-map": LocalJSX.HubMap & JSXBase.HTMLAttributes<HTMLHubMapElement>;
            "hub-metadata-editor": LocalJSX.HubMetadataEditor & JSXBase.HTMLAttributes<HTMLHubMetadataEditorElement>;
            "hub-places-map": LocalJSX.HubPlacesMap & JSXBase.HTMLAttributes<HTMLHubPlacesMapElement>;
            "hub-profile-card": LocalJSX.HubProfileCard & JSXBase.HTMLAttributes<HTMLHubProfileCardElement>;
            "hub-profile-editor": LocalJSX.HubProfileEditor & JSXBase.HTMLAttributes<HTMLHubProfileEditorElement>;
            "hub-radar": LocalJSX.HubRadar & JSXBase.HTMLAttributes<HTMLHubRadarElement>;
            "hub-sonar-chat": LocalJSX.HubSonarChat & JSXBase.HTMLAttributes<HTMLHubSonarChatElement>;
            "hub-statistic": LocalJSX.HubStatistic & JSXBase.HTMLAttributes<HTMLHubStatisticElement>;
            "hub-suggest-input": LocalJSX.HubSuggestInput & JSXBase.HTMLAttributes<HTMLHubSuggestInputElement>;
            "hub-telemetry": LocalJSX.HubTelemetry & JSXBase.HTMLAttributes<HTMLHubTelemetryElement>;
            "hub-topic-picker": LocalJSX.HubTopicPicker & JSXBase.HTMLAttributes<HTMLHubTopicPickerElement>;
            "hub-upload": LocalJSX.HubUpload & JSXBase.HTMLAttributes<HTMLHubUploadElement>;
            "hub-upload-file": LocalJSX.HubUploadFile & JSXBase.HTMLAttributes<HTMLHubUploadFileElement>;
            "hub-workspace": LocalJSX.HubWorkspace & JSXBase.HTMLAttributes<HTMLHubWorkspaceElement>;
            "metadata-element-view": LocalJSX.MetadataElementView & JSXBase.HTMLAttributes<HTMLMetadataElementViewElement>;
            "metadata-form": LocalJSX.MetadataForm & JSXBase.HTMLAttributes<HTMLMetadataFormElement>;
            "metadata-section-help": LocalJSX.MetadataSectionHelp & JSXBase.HTMLAttributes<HTMLMetadataSectionHelpElement>;
            "metadata-section-view": LocalJSX.MetadataSectionView & JSXBase.HTMLAttributes<HTMLMetadataSectionViewElement>;
        }
    }
}
